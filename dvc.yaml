stages:
  #ingestion de datos
  data_ingestion:
    #comando usado para la ingestion 
    cmd: python src/cnnClassifier/pipeline/stage_01_data_ingestion.py
    deps:
      #depende de si mismo 
      - src/cnnClassifier/pipeline/stage_01_data_ingestion.py
      #depende del archivo config pues de aquí vienen donde se va a guardar
      - config/config.yaml
    outs:
      #que es lo que genera
      - artifacts/data_ingestion/Chest-CT-Scan-data


  prepare_base_model:
    cmd: python src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
    deps:
      - src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    #definiendo los hiperparámetros del modelo base
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    outs:
      - artifacts/prepare_base_model


  training:
    cmd: python src/cnnClassifier/pipeline/stage_03_model_trainer.py
    deps:
      - src/cnnClassifier/pipeline/stage_03_model_trainer.py
      - config/config.yaml
      - artifacts/data_ingestion/Chest-CT-Scan-data #depende de los datos con los que se entrena
      - artifacts/prepare_base_model #depende del modelo base
    params:
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5


  evaluation:
    cmd: python src/cnnClassifier/pipeline/stage_04_model_evaluation.py
    deps:
      - src/cnnClassifier/pipeline/stage_04_model_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Chest-CT-Scan-data #depende de los datos de entrenamiento
      - artifacts/training/model.h5 #depende del modelo entrenado
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    #metricas que se generan
    metrics:
    - scores.json:
        cache: false
